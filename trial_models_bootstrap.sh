#! /bin/bash

#archive that components will be fit for
archive=$1

#get the maximum amplitude of the input profile
max_amp=$(pdv -FTp -A $archive | grep -v File | grep -v MJD | sort -gk4,4 | tail -n1 | awk '{print $4}')

#define the number of trials for each number of components
n_trials=100


#initialise some values:
#1.  run_arg is just like a truth value - an external python scrip checks whether the chi-squared has
#    changed by less than 1. When this happens, the value of run_arg is changed to 1, and the while 
#    loop ends
#2.  each pass through the loop, the number of gaussian components in the model is increased by 1
#
run_arg=2
components=0


while [ $run_arg -gt 1 ]; do
	components=$((components+1))	
	touch output_"$components".dat
	trial=1  #set trial counter back to 1

	while [ $trial -lt $((n_trials+1)) ]; do
		if [ "$components" = "1" ]; then
			echo "log height" > paas.m
			python3.12 /home/pulsar/scratch/vonmises/generate_input.py -f $max_amp -n 1 >> paas.m 
		fi

		if [ "$components" != "1" ]; then
			prev_components=$((components-1))
			echo "log height" > paas.m

			#line below sorts by the last column (chisq), takes the lowest chisq model, removes the 
			#last column (chisq), and inserts a new line marker after every 3rd column
			cat output_"$prev_components".dat | awk '{print $NF,$0}' | sort -gr | cut -f2- -d' ' | tail -n1 | awk '{$NF=""; print $0}' | sed 's/ /\n/3; P; D' >> paas.m  
			
			python3.12 /home/pulsar/scratch/vonmises/generate_input.py -f $max_amp -n 1 >> paas.m 
		fi

		#fit the model to the archive using paas, with the -L option (logarithmic height) to ensure 
		#that the amplitudes are always greater than 0. Also check that there are no negative values
		#if [ $(cat paas.m | grep "-" | grep -v "e" | wc -l) = 0 ]; then
		paas -L -r paas.m $archive -f
		#fi

		#check if any values in the model are negative, later we'll reject models that contain negatives
		negative_vals=$(cat paas.m | sed 's/ /\n/1; P; D' | grep "." | awk '$1<0' | wc -l)



		#in the loop below, check if a paas.txt file has been created (indicating that the fit 
		#converged). If so,  check that the model contains no negative values, and if not, then write 
		#the paramters from paas.m (stripped of the line break) and the  chi-squared of the model to the 
		#output file, then increase the trial counter
		if [ -e paas.txt ]; then
			if [ "$negative_vals" = "0" ]; then				
				chisq=$(cat paas.txt | head -n1 | awk '{print $7}')
				echo $(cat paas.m | grep -v log) "$chisq" >> output_"$components".dat
				trial=$((trial+1))
			fi
		fi

		#check if there are any files generated by paas, and clean up if they exist
		if [ -e paas.std ]; then
			rm paas.std
		fi
		if [ -e paas.m ]; then
			rm paas.m
		fi
		if [ -e paas.txt ]; then
			rm paas.txt
		fi
		
	done

	

	# trying something new: after all trials for this model have been completed, compare the best
	# chisq for this many components to the best chisq from the previous number of components. If 
	# the chisq has not changed by >10% between models, rejected the more complicated one and
	# stop the fitting



	if [ $components -gt 1 ]; then
		best_chisq=$(cat output_"$components".dat | awk '{print $NF}' | sort -grk1,1 | tail -n1)
		previous_best_chisq=$(cat output_"$(echo $components 1 | awk '{print $1-$2}')".dat | awk '{print $NF}' | sort -grk1,1 | tail -n1)

		fractional_change=$(echo $previous_best_chisq $best_chisq | awk '{print ($1-$2)/$1}')
		
		if [ $(echo "$fractional_change < 0.1" | bc -l) -eq 1 ]; then
			run_arg=1
		fi
	fi	
	



	#check if there are any files generated by paas, and clean up if they exist
	if [ -e paas.std ]; then
		rm paas.std
	fi
	if [ -e paas.m ]; then
		rm paas.m
	fi
	if [ -e paas.txt ]; then
		rm paas.txt
	fi

done



