#! /bin/bash

#archive that components will be fit for
archive=$1
outputfile=$2

rm paas.*

#get the maximum amplitude of the input profile
max_amp=$(pdv -FTp -A $archive | grep -v File | grep -v MJD | sort -gk4,4 | tail -n1 | awk '{print $4}')

#define the number of trials for this number of components
n_trials=100

components=$(cat $outputfile | awk '{print $NF,$0}' | sort -gr | cut -f2- -d' ' | tail -n1 | awk '{$NF=""; print $0}' | sed 's/ /\n/3; P; D' | grep "." | wc -l)

components=$((components+1))	
touch output_"$components".dat
trial=1  #set trial counter back to 1

while [ $trial -lt $((n_trials+1)) ]; do
	prev_components=$((components-1))
	echo "log height" > paas.m
	cat output_"$prev_components".dat | awk '{print $NF,$0}' | sort -gr | cut -f2- -d' ' | tail -n1 | awk '{$NF=""; print $0}' | sed 's/ /\n/3; P; D' >> paas.m  

	python3.12 /home/pulsar/scratch/vonmises/generate_input.py -f $max_amp -n 1 >> paas.m 

	paas -L -r paas.m $archive -f

	#check if any values in the model are negative, later we'll reject models that contain negatives
	negative_vals=$(cat paas.m | sed 's/ /\n/1; P; D' | grep "." | awk '$1<0' | wc -l)


	if [ -e paas.txt ]; then
		if [ "$negative_vals" = "0" ]; then				
			chisq=$(cat paas.txt | head -n1 | awk '{print $7}')
			echo $(cat paas.m | grep -v log) "$chisq" >> output_"$components".dat
			trial=$((trial+1))
		fi
	fi

	#check if there are any files generated by paas, and clean up if they exist
	if [ -e paas.std ]; then
		rm paas.std
	fi
	if [ -e paas.m ]; then
		rm paas.m
	fi
	if [ -e paas.txt ]; then
		rm paas.txt
	fi

done


